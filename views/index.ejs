<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/styles/style.css"> <!-- Update the path to your CSS file -->
    <title>Lights_Out</title>
</head>

<body class="bg-gray-200 h-screen flex items-center justify-center">
    <div class="bg-white p-8 rounded-lg shadow-md w-full max-w-md">
        <h1 class="text-4xl font-bold mb-4 text-center">Lights Out</h1>

        <!-- Game Board -->
        <div id="game-board" class="grid grid-cols-5 gap-4 mb-6">
            <!-- Dynamically generate buttons using EJS -->
            <% for (let row=0; row < 5; row++) { %>
                <% for (let col=0; col < 5; col++) { %>
                    <button id="cell_<%= row %>_<%= col %>"
                        class="h-16 w-16 rounded-md <% if (board[row][col]) { %>bg-yellow-500<% } else { %>bg-gray-300<% } %>"
                        data-row="<%= row %>" data-col="<%= col %>"></button>
                    <% } %>
                        <% } %>
        </div>

        <!-- Additional Components -->
        <div class="mb-4">
            <!-- Player Information -->
            <div class="flex items-center justify-between mb-4">
                <span class="text-lg">Welcome, PlayerName!</span>
                <button class="text-blue-500">Logout</button>
            </div>

            <!-- Level Selector -->
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700">Select Level:</label>
                <select id="level-selector"
                    class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring focus:border-blue-300">
                    <option value="1">Level 1</option>
                    <option value="2">Level 2</option>
                    <!-- Add more levels as needed -->
                </select>
            </div>

            <!-- Current Level Display -->
            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700">Current Level:</label>
                <span id="current-level" class="text-lg font-semibold">1</span>
            </div>

            <!-- Reset Game Button -->
            <button id="reset-game" class="w-full bg-green-500 text-white px-4 py-2 rounded-md mb-4">Reset Game</button>

            <!-- Login and Signup Links -->
            <div class="flex justify-center space-x-4">
                <a href="#" class="text-blue-500">Login</a>
                <a href="#" class="text-blue-500">Signup</a>
            </div>
        </div>

        <script>
            // Include your JavaScript logic here to interact with the backend and update the UI

            // Add this script block to set event listeners
            document.addEventListener('DOMContentLoaded', function () {
                const buttons = document.querySelectorAll('[id^="cell_"]');
                buttons.forEach(button => {
                    button.addEventListener('click', function () {
                        const row = this.dataset.row;
                        const col = this.dataset.col;
                        toggleLights(row, col);
                    });
                });
            });


            async function toggleLights(row, col) {
                try {
                    const response = await fetch("/api/toggleLights", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ row, col }),
                    });

                    const data = await response.json();
                    updateBoard(data.board);

                    if (data.gameEnded) {
                        alert("Congratulations! You won!");
                        // Handle game end logic as needed
                    }
                } catch (error) {
                    console.error("Error toggling lights:", error);
                }
            }

            function updateBoard(newBoard) {
                // Implement logic to update the visual representation of the game board
                // For example, you can update the button classes based on the new board state
                for (let row = 0; row < 5; row++) {
                    for (let col = 0; col < 5; col++) {
                        const button = document.getElementById(`cell_${row}_${col}`);
                        button.className = `h-16 w-16 rounded-md ${newBoard[row][col] ? 'bg-yellow-500' : 'bg-gray-300'}`;
                    }
                }
            }
        </script>
    </div>
</body>

</html>