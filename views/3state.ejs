<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/styles/style.css"> <!-- Update the path to your CSS file -->
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9151064528587732"
     crossorigin="anonymous"></script>
    <link rel="icon" href="/photos/lights_out_icon.jpeg" type="image/jpeg">

    <style>
        body {
            /* background: linear-gradient(to right, #4A5568, #2D3748); */
            background-image: url('https://source.unsplash.com/1600x900/?game');/
            /* Update the gradient colors as needed */
        }

        #game-board {
            margin: 0 auto;
        }

        #congratulations {
            background-color: #68D391;
            /* Update the background color as needed */
        }


        #hint-board .rounded-md {
            border: 2px solid #E5E7EB;
            /* Add border for a more refined look */
        }

        #hint-matrix .rounded-md {
            background-color: transparent !important;
            /* Remove background color */
            box-shadow: none;
            /* Remove shadow */
        }

        #hint-matrix .rounded-md div {
            background-color: transparent;
            /* Remove background color */
            box-shadow: none;
            /* Remove shadow */
        }

        #hint-matrix .rounded-md div div {
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
            /* Add text shadow for better readability */
        }

        /* Define the transition effect */
        .transition-effect {
            transition: transform 0.3s ease-in-out;
        }

        /* Define the hover effect */
        .transition-effect:hover {
            transform: scale(1.1);
            /* For example, scale the size of the element */
        }
    </style>
    <title>Lights_Out</title>
</head>

<body class="h-fit">

    <!-- Header in partials -->
    <%- include('partials/header') %>

        <div class="h-fit min-h-dvh flex items-center justify-center">


            <!-- Hint Board -->
            <div id="outer-hint-board"
                class=" p-5 rounded-lg shadow-2xl w-full h-[96%] max-w-fit mx-auto overflow-hidden hidden">
                <div id="hint-board" class="mb-6 w-full min-w-max">
                    <button id="remove-hint-button"
                        class="relative top-0 right-0 text-white bg-red-500 px-2 py-1 rounded-md">Remove</button>
                    <h3 class="text-lg font-bold mb-2">Hint:</h3>
                    <div id="hint-matrix" class="grid grid-cols-<%=board.length %> gap-2">

                        <!-- This structure is dynamically created by the client side javascript -->

                    </div>
                </div>
            </div>

            <div id="complete-game"
                class="bg-white p-5 rounded-lg shadow-md w-full h-[96%] max-w-fit mx-auto overflow-hidden">


                <!-- Game board -->
                <div id="game-board" class="grid grid-cols-<%= board.length %> gap-2 mb-6 w-full min-w-max">
                    <!-- Dynamically generate buttons using EJS -->
                    <% for (let row=0; row < board.length; row++) { %>
                        <% for (let col=0; col < board[row].length; col++) { %>
                            <button id="cell_<%= row %>_<%= col %>"
                                class="h-16 w-16 rounded-md focus:outline-none focus:ring focus:border-blue-300 transition-all duration-300
                            <% if (board[row][col] === 0) { %>bg-gray-300<% } else if (board[row][col] === 1) { %>bg-red-500<% } else { %>bg-blue-500<% } %>"
                                data-row="<%= row %>" data-col="<%= col %>"></button>
                            <% } %>
                                <% } %>
                </div>



                <!-- Congratulations on winning the game. -->
                <div id="congratulations" class="w-full text-center p-6 hidden text-white rounded-lg">
                    <img src="gifs/yay.gif" alt="Congratulations!, you won the game." class="h-16 mx-auto mb-4">
                    <h2 class="text-4xl font-bold mb-4">Congratulations!</h2>
                    <p class="text-lg">You won the game! ðŸŽ‰</p>
                    <p id="total-moves" class="text-lg"></p>
                    <p id="minimum-moves" class="text-lg">Target Moves: <%= 2 * level %>
                    </p>
                </div>



                <!-- Additional Components -->
                <div class="grid">
                    <!-- Player Information -->
                    <div id="moves" class="flex items-center justify-between mb-4">
                        <p id="target-moves" class="text-xs">Target Moves: <%=2*level %>
                        </p>
                        <p id="user-moves" class="text-xs">Your Moves: 0 </p>
                        <button id="hint-button" class="text-blue-500">Hint</button>
                    </div>

                    <!-- State Selector -->
                    <form id="game-state" class="mb-4" action="/state" method="POST">
                        <label class="block text-sm font-medium text-gray-700">Select Mode:</label>
                        <select id="level-selector" name="level" onchange="submitStateForm()"
                            class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring focus:border-blue-300">
                            <option value="Pro">Pro Mode</option>
                            <option value="Normal">Normal Mode</option>
                        </select>

                    </form>

                    <!-- Level Selector -->
                    <form id="levelForm" class="mb-4" action="/levels3" method="POST">
                        <label class="block text-sm font-medium text-gray-700">Select Level:</label>
                        <select id="level-selector" name="level" onchange="submitForm()"
                            class="mt-1 block w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring focus:border-blue-300">
                            <option value="<%=level %>">Level <%=level %>
                            </option>
                            <option value="1">Level 1</option>
                            <option value="2">Level 2</option>
                            <option value="3">Level 3</option>
                            <option value="4">Level 4</option>
                            <option value="5">Level 5</option>
                            <option value="6">Level 6 ðŸ‘‘</option>
                            <option value="7">Level 7</option>
                            <option value="8">Level 8</option>
                            <option value="9">Level 9</option>
                            <option value="10">Level 10</option>
                            <!-- Add more levels as needed -->
                        </select>

                    </form>

                    <!-- Current Level Display -->
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700">Current Level:</label>
                        <span id="current-level" class="text-lg font-semibold">
                            <%=level %>
                        </span>
                    </div>

                    <!-- Nevel Level Anchor -->
                    <div class="flex">

                        <a id="previous-game" href="/levels3?CurrLevel=<%= level %>&id=0"
                            class="w-full justify-center flex bg-green-500 hover:bg-green-800 text-white mr-1 px-4 py-2 rounded-md">Prev
                        </a>
                        <a id="next-game" href="/levels3?CurrLevel=<%= level %>&id=1"
                            class="w-full justify-center flex bg-green-500 hover:bg-green-800 text-white text-fit ml-1 px-4 py-2 rounded-md">Next
                        </a>
                    </div>

                </div>

            </div>

        </div>
        <%- include('partials/footer') %>
            <script>
                // Include your JavaScript logic here to interact with the backend and update the UI
                let clickCount = 0;
                // Add this script block to set event listeners
                document.addEventListener('DOMContentLoaded', function () {
                    const buttons = document.querySelectorAll('[id^="cell_"]');

                    const clickSound = new Audio('/sound_effects/clicking_sound.mp3'); // Change 'path_to_your_sound_file.mp3' to the actual path of your sound file

                    function playClickSound() {
                        clickSound.currentTime = 0; // Reset the sound to the beginning in case it's already playing
                        clickSound.play(); // Play the sound
                    }


                    buttons.forEach(button => {
                        button.addEventListener('click', function () {
                            clickCount++;
                            document.getElementById("user-moves").innerText = "Your Moves: " + clickCount;

                            const row = this.dataset.row;
                            const col = this.dataset.col;
                            console.log("I am Aman");
                            console.log(row, col);
                            toggle3Lights(row, col);
                            playClickSound(); // Play the sound when the button is clicked
                        });
                    });
                });

                const winSound = new Audio('/sound_effects/winning_sound.mp3');
                function playwinSound() {
                    winSound.currentTime = 0; // Reset the sound to the beginning in case it's already playing
                    winSound.play(); // Play the sound
                }


                async function toggle3Lights(row, col) {
                    try {
                        const response = await fetch("/api/toggle3Lights", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify({ row, col, clickCount }),
                        });

                        const data = await response.json();
                        console.log("data is: ", data);
                        console.log("length: " + data.board3.length);
                        await updateBoard(data.board3, data.board3.length);  // Update the board first

                        if (data.gameEnded) {
                            document.getElementById('game-board').classList.add('hidden'); //Hiding div of 'board of game'.
                            document.getElementById('moves').classList.add('hidden'); //Hiding div of 'board of game'.
                            document.getElementById('congratulations').classList.remove('hidden'); //Showing div of  'congratulations'.
                            document.getElementById('total-moves').innerText = `You took ${clickCount} moves.`; //Showing div of  'congratulations'.


                            document.getElementById('next-game').classList.add('bg-blue-500', 'hover:bg-blue-800')
                            document.getElementById('next-game').classList.remove('bg-green-500', 'hover:bg-green-800')
                            document.getElementById('previous-game').classList.add('bg-teal-300', 'hover:bg-teal-500')
                            document.getElementById('next-game').classList.remove('bg-green-500', 'hover:bg-green-800')
                            playwinSound();
                        }
                    } catch (error) {
                        console.error("Error toggling lights:", error);
                    }
                }


                function updateBoard(newBoard, matrixSize) {
                    // Implement logic to update the visual representation of the game board
                    // For example, you can update the button classes based on the new board state
                    for (let row = 0; row < matrixSize; row++) {
                        console.log(matrixSize)
                        for (let col = 0; col < matrixSize; col++) {
                            const button = document.getElementById(`cell_${row}_${col}`);
                            button.className = `h-16 w-16 rounded-md ${newBoard[row][col] == 0 ? 'bg-gray-300' : newBoard[row][col] == 1 ? 'bg-red-500' : 'bg-blue-500'}`;
                        }
                    }
                }

                // Add event listener for the hint button
                document.getElementById("hint-button").addEventListener('click', async function () {
                    document.body.style.backdropFilter = 'blur(15px)';
                    try {
                        const response = await fetch("/api/getHint3", { method: "GET" });
                        console.log("response of getHInt3: ",response);
                        const hintMatrix = await response.json();
                        console.log("hint matrix: ", hintMatrix.hintGrid3);
                        updateHintBoard(hintMatrix.hintGrid3); // Update the hint board with the received hint matrix
                        document.getElementById('outer-hint-board').classList.remove('hidden'); // Show the hint board
                        document.getElementById('complete-game').classList.add('hidden'); // hide the complete game board
                    } catch (error) {
                        console.error("Error getting hint:", error);
                    }
                });

                function updateHintBoard(hintMatrix) {
                    const hintMatrixDiv = document.getElementById('hint-matrix');

                    // Clear previous content
                    hintMatrixDiv.innerHTML = '';

                    // Loop through each row of the hint matrix
                    for (let i = 0; i < hintMatrix.length; i++) {
                        // Loop through each column of the current row
                        for (let j = 0; j < hintMatrix[i].length; j++) {
                            // Create a div element for the cell
                            const cellDiv = document.createElement('div');
                            cellDiv.classList.add('h-16', 'w-16', 'rounded-md', 'bg-gray-300', 'relative');

                            // Create a div element for the number
                            const numberDiv = document.createElement('div');
                            numberDiv.classList.add('absolute', 'inset-0', 'flex', 'items-center', 'justify-center', 'text-gray-700', 'text-lg', 'font-bold');
                            numberDiv.textContent = hintMatrix[i][j]; // Set the content of the number div to the cell value
                            console.log(hintMatrix[i][j]);
                            // Append the number div to the cell div
                            cellDiv.appendChild(numberDiv);

                            // Append the cell div to the hint matrix div
                            hintMatrixDiv.appendChild(cellDiv);
                        }
                    }
                }

                document.getElementById("remove-hint-button").addEventListener('click', async function () {

                    document.getElementById("complete-game").classList.remove("hidden");
                    document.getElementById("outer-hint-board").classList.add("hidden");

                    document.body.style.backdropFilter = '';

                })
                

                // Submiting the level & making the POST request to the backend side.
                function submitForm() {
                    document.getElementById("levelForm").submit();
                }

                // Submiting the state & making the POST request to the backend side.
                function submitStateForm() {
                    document.getElementById("game-state").submit();
                }
            </script>
            </div>
</body>

</html>